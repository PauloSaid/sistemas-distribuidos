// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: wallet.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Crypto {
  public static partial class Wallet
  {
    static readonly string __ServiceName = "wallet.Wallet";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Crypto.GetWalletRequest> __Marshaller_wallet_GetWalletRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Crypto.GetWalletRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Crypto.GetWalletResponse> __Marshaller_wallet_GetWalletResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Crypto.GetWalletResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Crypto.CreateWalletRequest> __Marshaller_wallet_CreateWalletRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Crypto.CreateWalletRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Crypto.CreateWalletResponse> __Marshaller_wallet_CreateWalletResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Crypto.CreateWalletResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Crypto.ListAvailableCryptoTypesRequest> __Marshaller_wallet_ListAvailableCryptoTypesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Crypto.ListAvailableCryptoTypesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Crypto.ListAvailableCryptoTypesResponse> __Marshaller_wallet_ListAvailableCryptoTypesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Crypto.ListAvailableCryptoTypesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Crypto.UpdateCryptoRequest> __Marshaller_wallet_UpdateCryptoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Crypto.UpdateCryptoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Crypto.UpdateCryptoResponse> __Marshaller_wallet_UpdateCryptoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Crypto.UpdateCryptoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Crypto.TransferCryptoRequest> __Marshaller_wallet_TransferCryptoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Crypto.TransferCryptoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Crypto.TransferCryptoResponse> __Marshaller_wallet_TransferCryptoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Crypto.TransferCryptoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Crypto.DeleteWalletRequest> __Marshaller_wallet_DeleteWalletRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Crypto.DeleteWalletRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Crypto.DeleteWalletResponse> __Marshaller_wallet_DeleteWalletResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Crypto.DeleteWalletResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Crypto.GetWalletRequest, global::Crypto.GetWalletResponse> __Method_GetWallet = new grpc::Method<global::Crypto.GetWalletRequest, global::Crypto.GetWalletResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWallet",
        __Marshaller_wallet_GetWalletRequest,
        __Marshaller_wallet_GetWalletResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Crypto.CreateWalletRequest, global::Crypto.CreateWalletResponse> __Method_CreateWallet = new grpc::Method<global::Crypto.CreateWalletRequest, global::Crypto.CreateWalletResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateWallet",
        __Marshaller_wallet_CreateWalletRequest,
        __Marshaller_wallet_CreateWalletResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Crypto.ListAvailableCryptoTypesRequest, global::Crypto.ListAvailableCryptoTypesResponse> __Method_ListAvailableCryptoTypes = new grpc::Method<global::Crypto.ListAvailableCryptoTypesRequest, global::Crypto.ListAvailableCryptoTypesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAvailableCryptoTypes",
        __Marshaller_wallet_ListAvailableCryptoTypesRequest,
        __Marshaller_wallet_ListAvailableCryptoTypesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Crypto.UpdateCryptoRequest, global::Crypto.UpdateCryptoResponse> __Method_UpdateCrypto = new grpc::Method<global::Crypto.UpdateCryptoRequest, global::Crypto.UpdateCryptoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCrypto",
        __Marshaller_wallet_UpdateCryptoRequest,
        __Marshaller_wallet_UpdateCryptoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Crypto.TransferCryptoRequest, global::Crypto.TransferCryptoResponse> __Method_TransferCrypto = new grpc::Method<global::Crypto.TransferCryptoRequest, global::Crypto.TransferCryptoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TransferCrypto",
        __Marshaller_wallet_TransferCryptoRequest,
        __Marshaller_wallet_TransferCryptoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Crypto.DeleteWalletRequest, global::Crypto.DeleteWalletResponse> __Method_DeleteWallet = new grpc::Method<global::Crypto.DeleteWalletRequest, global::Crypto.DeleteWalletResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteWallet",
        __Marshaller_wallet_DeleteWalletRequest,
        __Marshaller_wallet_DeleteWalletResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Crypto.WalletReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for Wallet</summary>
    public partial class WalletClient : grpc::ClientBase<WalletClient>
    {
      /// <summary>Creates a new client for Wallet</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WalletClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Wallet that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WalletClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WalletClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WalletClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Crypto.GetWalletResponse GetWallet(global::Crypto.GetWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWallet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Crypto.GetWalletResponse GetWallet(global::Crypto.GetWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWallet, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Crypto.GetWalletResponse> GetWalletAsync(global::Crypto.GetWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWalletAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Crypto.GetWalletResponse> GetWalletAsync(global::Crypto.GetWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWallet, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Crypto.CreateWalletResponse CreateWallet(global::Crypto.CreateWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWallet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Crypto.CreateWalletResponse CreateWallet(global::Crypto.CreateWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateWallet, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Crypto.CreateWalletResponse> CreateWalletAsync(global::Crypto.CreateWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWalletAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Crypto.CreateWalletResponse> CreateWalletAsync(global::Crypto.CreateWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateWallet, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Crypto.ListAvailableCryptoTypesResponse ListAvailableCryptoTypes(global::Crypto.ListAvailableCryptoTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAvailableCryptoTypes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Crypto.ListAvailableCryptoTypesResponse ListAvailableCryptoTypes(global::Crypto.ListAvailableCryptoTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAvailableCryptoTypes, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Crypto.ListAvailableCryptoTypesResponse> ListAvailableCryptoTypesAsync(global::Crypto.ListAvailableCryptoTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAvailableCryptoTypesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Crypto.ListAvailableCryptoTypesResponse> ListAvailableCryptoTypesAsync(global::Crypto.ListAvailableCryptoTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAvailableCryptoTypes, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Crypto.UpdateCryptoResponse UpdateCrypto(global::Crypto.UpdateCryptoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCrypto(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Crypto.UpdateCryptoResponse UpdateCrypto(global::Crypto.UpdateCryptoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCrypto, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Crypto.UpdateCryptoResponse> UpdateCryptoAsync(global::Crypto.UpdateCryptoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCryptoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Crypto.UpdateCryptoResponse> UpdateCryptoAsync(global::Crypto.UpdateCryptoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCrypto, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Crypto.TransferCryptoResponse TransferCrypto(global::Crypto.TransferCryptoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferCrypto(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Crypto.TransferCryptoResponse TransferCrypto(global::Crypto.TransferCryptoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TransferCrypto, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Crypto.TransferCryptoResponse> TransferCryptoAsync(global::Crypto.TransferCryptoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferCryptoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Crypto.TransferCryptoResponse> TransferCryptoAsync(global::Crypto.TransferCryptoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TransferCrypto, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Crypto.DeleteWalletResponse DeleteWallet(global::Crypto.DeleteWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWallet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Crypto.DeleteWalletResponse DeleteWallet(global::Crypto.DeleteWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteWallet, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Crypto.DeleteWalletResponse> DeleteWalletAsync(global::Crypto.DeleteWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWalletAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Crypto.DeleteWalletResponse> DeleteWalletAsync(global::Crypto.DeleteWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteWallet, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override WalletClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WalletClient(configuration);
      }
    }

  }
}
#endregion
